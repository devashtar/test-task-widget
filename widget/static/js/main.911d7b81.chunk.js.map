{"version":3,"sources":["calc.action.ts","App.tsx","index.tsx"],"names":["prior","calc","a","b","Math","round","parsePolishNotationArray","array","n","tmpArray","forEach","item","test","push","Number","op2","pop","op1","result","calculate","dirtyString","parseArray","replace","match","parseString","outputArray","stackTempValues","value","i","length","String","weightCurOperator","weightLastStackOperator","getPolishNotation","Search","Input","App","useState","setResult","setValue","error","setError","className","message","description","type","showIcon","orientation","plain","size","placeholder","onSearch","e","trim","isNaN","setTimeout","onChange","val","target","enterButton","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.911d7b81.chunk.js","sourcesContent":["interface IPrior {\n    [key: string]: number\n}\n\ntype calcOptions = {\n    [key: string]: (param1: number, param2: number) => number\n}\n\nconst prior = {\n    '(': 4,\n    '^': 3,\n    '*': 2,\n    '/': 2,\n    '+': 1,\n    '-': 1\n} as IPrior;\n\nconst fixFloatNum = (n: number): number => (Math.round(+n * 100000) / 100000);\n\nconst calc = {\n    '+': (a: number, b: number) => +a + +b,\n    '-': (a: number, b: number) => a - b,\n    '*': (a: number, b: number) => a * b,\n    '/': (a: number, b: number) => a === 0 || b === 0 ? 0 : Math.round(a / b * 1000) / 1000,\n    '^': (a: number, b: number) => a ** b\n} as calcOptions;\n\n\nfunction parseString(dirtyString: string): Array<string> | null {\n    const str = dirtyString.replace(/\\s*/g, '');\n    const array = str.match(/(?<=\\d)-(?=-?\\d)|(-?\\d+\\.\\d+)|(?<=[)])-|(-?\\d+)|[-](?=\\()|[+*/()^]/g);\n    return array;\n}\n\nfunction getPolishNotation(array: Array<string>): Array<string> {\n\n    const outputArray = [],\n        stackTempValues = [];\n\n    for (const value of array) {\n        if (/-?\\d+/.test(value)) {\n            \n            outputArray.push(value);\n\n        } else if (/[(]/.test(value)) {\n\n            stackTempValues.push(value);\n\n        } else if (/[)]/.test(value)) {\n\n            for (let i = stackTempValues.length - 1; i >= 0; i--) {\n                if (/[(]/.test(stackTempValues[i])) {\n                    stackTempValues.pop();\n                    break;\n                } else {\n                    outputArray.push(String(stackTempValues.pop()));\n                }\n            }\n\n        } else {\n\n            const weightCurOperator = prior[value];\n\n            for (let i = stackTempValues.length - 1; i >= 0; i--) {\n                const weightLastStackOperator = prior[stackTempValues[i]];\n\n                if (weightLastStackOperator > weightCurOperator || (value !== '^' && weightLastStackOperator === weightCurOperator)) {\n\n                    if (weightLastStackOperator !== 4) {\n                        outputArray.push(String(stackTempValues.pop()));\n                    } else {\n                        break; \n                    }\n                }\n\n            }\n\n            stackTempValues.push(value);\n            \n        }\n    }\n\n    if (stackTempValues.length !== 0) {\n        for (let i = stackTempValues.length - 1; i >= 0; i--) outputArray.push(String(stackTempValues.pop()));\n    }\n\n    return outputArray;\n}\n\nfunction parsePolishNotationArray(array: Array<string>): number {\n\n    const tmpArray = [] as Array<number>;\n\n    array.forEach((item: string) => {\n        if (/-?\\d+/.test(item)) {\n            tmpArray.push(Number(item));\n        } else {\n            const op2 = tmpArray.pop();\n            const op1 = tmpArray.pop();\n\n            const result = calc[item](Number(op1), Number(op2));\n\n            tmpArray.push(result)\n        }\n    });\n\n    const currentResult = fixFloatNum(Number(tmpArray.pop()));\n    \n    return currentResult;\n}\n\nfunction calculate(dirtyString: string): number | null {\n\n    const parseArray = parseString(dirtyString);\n\n    if (parseArray === null) return null;\n\n    const polishNotationArray = getPolishNotation(parseArray);\n\n    const result = parsePolishNotationArray(polishNotationArray);\n\n    return result;\n\n}\n\nexport default calculate;","import \"antd/dist/antd.css\";\nimport React, { useState } from \"react\";\nimport \"./App.scss\";\nimport { Input, Divider, Alert } from \"antd\";\nimport calculate from \"./calc.action\";\n\nconst { Search } = Input;\n\nfunction App() {\n  const [result, setResult] = useState(\"\");\n  const [value, setValue] = useState(\"\");\n  const [error, setError] = useState(false);\n\n  const showError = () => {\n    setResult(\"\");\n    setError(true);\n    setTimeout(() => {\n      setError(false);\n      setValue(\"\");\n    }, 2000);\n  };\n\n  const onSearch = (e: any) => {\n    if (e.trim() === \"\") {\n      setValue(\"\");\n      return setResult(\"\");\n    }\n    const result = calculate(e);\n    if (result === null || isNaN(result)) {\n      return showError();\n    }\n    setResult(String(result));\n    setValue(\"\");\n  };\n\n  const onChange = (val: any) => {\n    setValue(val);\n  };\n\n  return (\n    <div className=\"App\">\n      {error && (\n        <Alert\n          className=\"error__message\"\n          message=\"Error\"\n          description=\"Некорректное выражение!\"\n          type=\"error\"\n          showIcon\n        />\n      )}\n      <Divider orientation=\"left\" plain>\n        Например: 2/2*(3^2+1)+10\n      </Divider>\n\n      <div className=\"wrapper\">\n      <Search\n        className=\"calculator\"\n        size=\"large\"\n        placeholder=\"введите выражение\"\n        onSearch={onSearch}\n        value={value}\n        onChange={(e: any) => onChange(e.target.value)}\n        enterButton=\"Посчитать\"\n      />\n      <div className=\"result\">Ответ: {result}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n// \"https://docs.google.com/document/d/1-q_3m-TPfTMpTbR4qj_GU7Yaqv2HDpsBlasYZ4obYFk/edit\"\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('widget')\n);\n"],"sourceRoot":""}